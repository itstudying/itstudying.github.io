<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on itstudying</title>
    <link>https://blog.itstudying.com/tags/golang/</link>
    <description>Recent content in golang on itstudying</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.itstudying.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gomod导入本地模块</title>
      <link>https://blog.itstudying.com/2020/gomod%E5%AF%BC%E5%85%A5%E6%9C%AC%E5%9C%B0%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2020/gomod%E5%AF%BC%E5%85%A5%E6%9C%AC%E5%9C%B0%E6%A8%A1%E5%9D%97/</guid>
      <description>如果想要在一个模块中引入本地的另一个模块，可以使用replace方法来完成。
本地项目1：hsl-hq
code/hsl/hsl-hq . ├── README.md ├── go.mod ├── market │ ├── internal │ │ ├── hk │ │ │ ├── tradeday.go │ │ │ └── tradeday_test.go │ │ └── nohk │ │ ├── tradeday.go │ │ └── tradeday_test.go │ ├── tradeday.go │ └── tradeday_test.go └── vendor └── vendor.json  本地项目2：hk-search
code/hsl/hk-search . ├── Makefile ├── README.md ├── cmd │ ├── main.go └── src ├── serv │ ├── ma.go └── util └── util.</description>
    </item>
    
    <item>
      <title>微服务链路追踪-jaeger部署和使用</title>
      <link>https://blog.itstudying.com/2020/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA-jaeger/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2020/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA-jaeger/</guid>
      <description>四 部署 因为不是所有机器都安装有docker，所以会有docker和二进制两种方式部署
1. 部署elasticsearch docker pull es镜像时必须指定版本号
docker pull elasticsearch:6.4.2  启动
docker run -d -p 9200:9200 -p 9300:9300 -v /data1/elasticsearch/data:/usr/share/elasticsearch/data -v /data1/elasticsearch/logs:/usr/share/elasticsearch/logs -e &amp;quot;discovery.type=single-node&amp;quot; -e ES_JAVA_OPTS=&amp;quot;-Xms512m -Xmx512m&amp;quot; --restart=always --name es elasticsearch:6.4.2  启动后如果遇到报错说没权限Permission denied，则把-v指定的目录赋予权限执行
chmod +777 /data1/elasticsearch/data  重新启动es
docker start es   ES_JAVA_OPTS 指定jvm虚拟机内存 restart=always 程序异常退出后自动重启
2. 部署collector 1. 使用supervisor部署 官网上并没有详细介绍collector的部署，不过一般默认参数然后根据存储引擎做相应配置就够用，想看详细参数可以执行
二进制程序生成collector文档 ./jaeger-collector docs  使用supervisor管理jaeger-collector程序
[program:jaeger-collector] command=/data1/jaeger/jaeger-collector --log-level=debug autostart=true autorestart=true directory=/data1/jaeger startsecs=10 environment=SPAN_STORAGE_TYPE=elasticsearch,ES_SERVER_URLS=http://你的esip:9200 stdout_logfile=/data1/jaeger/logs/collector-info.log stdout_logfile_maxbytes=100MB stdout_logfile_backups=10 stdout_capture_maxbytes=1MB stderr_logfile=/data1/jaeger/logs/collector-err.</description>
    </item>
    
    <item>
      <title>grpc连接重连和数据传输</title>
      <link>https://blog.itstudying.com/2019/grpc%E8%BF%9E%E6%8E%A5%E9%87%8D%E8%BF%9E%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/grpc%E8%BF%9E%E6%8E%A5%E9%87%8D%E8%BF%9E%E5%92%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</guid>
      <description>对grpc的连接、数据传输和重连相关做下知识整理，以下
 基础知识 grpc是基于http2的，http2作为应用层协议相比http1能很好的支持多路复用，在一个连接上做更多的数据传输任务并且多个数据传输互不干扰
1. 帧 http2的数据传输以帧为单位。帧的传输必须在流中进行
2. 流 在建立连接后，帧的传输是在流中进行的，一个流的建立、传输和关闭，类似于一次http请求可以看做是一个完整的数据传输处理过程
3. 简单理解 假设现有一个go程序，此程序中有20个goroutine,10个类型为chan []byte的channel，每两个goroutine操作一个channel向channel中发送和接收数据。那么对应http2，则go程序可以看成是一个http2连接，10个channel可以看成是这个连接中10个流，每个流都有一个客户端和服务端既goroutine，goroutine发送的[]byte类型的数据可以看成http2的帧，帧里面存储的是需要传输的数据和协议。
连接和重连 连接示例： func dial(addr string) (*grpc.ClientConn, error) { dialOpts := []grpc.DialOption{ grpc.WithInsecure(), grpc.WithBlock(), } ctx, _ := context.WithTimeout(context.Background(), time.Second*5) rpcConn, err := grpc.DialContext(ctx, addr, dialOpts...) return rpcConn, err }  和grpc服务建立连接很简单，只需要调用函数Dail或者DialContext即可，Dial实际也就是调用了DialContext。
google.golang.org/grpc/clientconn.go // Dial creates a client connection to the given target. func Dial(target string, opts ...DialOption) (*ClientConn, error) { return DialContext(context.Background(), target, opts...) } func DialContext(ctx context.</description>
    </item>
    
    <item>
      <title>Golang socket websocket</title>
      <link>https://blog.itstudying.com/2019/golang_socket_websocket/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/golang_socket_websocket/</guid>
      <description>经作者授权转发 原文链接：https://www.jianshu.com/p/c0db1567bfd9
 Golang socket websocket 理论知识可以参考
网络信息怎么在网线中传播的 （转载自知乎）
Android 网络(一) 概念 TCP/IP Socket Http Restful
脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手
脑残式网络编程入门(二)：我们在读写Socket时，究竟在读写什么？
TCP 粘包问题浅析及其解决方案，这个帖子里大家一顿喷粘包这个叫法
我工作五年的时候也不知道 “TCP 粘包”，继续吐槽
一、API 1.服务端通过Listen加Accept package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net&amp;quot; &amp;quot;os&amp;quot; &amp;quot;time&amp;quot; ) func main() { //通过 ResolveTCPAddr 获取一个 TCPAddr //ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error) //net参数是&amp;quot;tcp4&amp;quot;、&amp;quot;tcp6&amp;quot;、&amp;quot;tcp&amp;quot;中的任意一个， //分别表示 TCP(IPv4-only),TCP(IPv6-only) //或者 TCP(IPv4,IPv6 的任意一个) //addr 表示域名或者IP地址， //例如&amp;quot;www.google.com:80&amp;quot; 或者&amp;quot;127.0.0.1:22&amp;quot;. service := &amp;quot;:7777&amp;quot; tcpAddr, err := net.ResolveTCPAddr(&amp;quot;tcp4&amp;quot;, service) checkError(err) //ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.</description>
    </item>
    
    <item>
      <title>gomod交叉编译cannot find module for path…</title>
      <link>https://blog.itstudying.com/2019/gomod%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91cannot_find_module_for_path/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/gomod%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91cannot_find_module_for_path/</guid>
      <description>gomod交叉编译cannot find module for path… 新建项目准备使用gomod管理依赖，而且项目没放在gopath的时候发现个问题，go build -o SI-Kline-Minute cmd/main.go能通过，GOOS=linux GOARCH=amd64 go build -o SI-Kline-Minute cmd/main.go进行交叉编译报找不到module错误
环境 项目结构
├── Makefile ├── README.md ├── SI-Kline-Minute ├── cmd │ └── main.go ├── common │ ├── db │ │ ├── mongo │ │ │ └── mongo.go │ │ └── redis │ ├── log │ │ └── logger.go │ └── utils │ └── utils.go ├── config │ └── config.go ├── config.toml ├── go.mod ├── go.</description>
    </item>
    
    <item>
      <title>golang utf-16le编码转换至utf-8</title>
      <link>https://blog.itstudying.com/2019/utf-16letoutf-8/</link>
      <pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/utf-16letoutf-8/</guid>
      <description>golang utf-16le编码转换至utf-8  最近工作中在做解析港股数据相关工作，香港交易所提供的 OMD-MMDH 服务将数据以字节流的形式下发，其中汉字使用utf16编码，而 golang 程序则默认utf8编码，所以需要对数据做转换，特此对 Unicode 相关知识以及 golang 实现utf16 转换至 utf8 的方法做下学习笔记
 BOM简介 BOM(Byte Order Mark) 既字节序标记，一般是出现在以Unicode编码的文件开始的头部。带BOM的Unicode编码文件查看其二进制编码会出现以下数据，下面只是一些常用的字符编码
   字符编码 Bom (十六进制)     UTF-8 EF BB BF   UTF-16 (BE) 大端序 FE FF   UTF-16 (LE) 小端序 FF FE   UTF-32 (BE) 大端序 00 00 FE FF   UTF-32 (LE) 小端序 FF FE 00 00   GB-18030 84 31 95 33    Unicode编码简介  Unicode 是容纳世界所有文字符号的国际标准编码，使用四个字节为每个字符编码。</description>
    </item>
    
  </channel>
</rss>