<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on itstudying</title>
    <link>https://blog.itstudying.com/tags/golang/</link>
    <description>Recent content in golang on itstudying</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.itstudying.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang socket websocket</title>
      <link>https://blog.itstudying.com/2019/golang_socket_websocket/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/golang_socket_websocket/</guid>
      <description>经作者授权转发 原文链接：https://www.jianshu.com/p/c0db1567bfd9
 Golang socket websocket 理论知识可以参考
网络信息怎么在网线中传播的 （转载自知乎）
Android 网络(一) 概念 TCP/IP Socket Http Restful
脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手
脑残式网络编程入门(二)：我们在读写Socket时，究竟在读写什么？
TCP 粘包问题浅析及其解决方案，这个帖子里大家一顿喷粘包这个叫法
我工作五年的时候也不知道 “TCP 粘包”，继续吐槽
一、API 1.服务端通过Listen加Accept package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net&amp;quot; &amp;quot;os&amp;quot; &amp;quot;time&amp;quot; ) func main() { //通过 ResolveTCPAddr 获取一个 TCPAddr //ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error) //net参数是&amp;quot;tcp4&amp;quot;、&amp;quot;tcp6&amp;quot;、&amp;quot;tcp&amp;quot;中的任意一个， //分别表示 TCP(IPv4-only),TCP(IPv6-only) //或者 TCP(IPv4,IPv6 的任意一个) //addr 表示域名或者IP地址， //例如&amp;quot;www.google.com:80&amp;quot; 或者&amp;quot;127.0.0.1:22&amp;quot;. service := &amp;quot;:7777&amp;quot; tcpAddr, err := net.ResolveTCPAddr(&amp;quot;tcp4&amp;quot;, service) checkError(err) //ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.</description>
    </item>
    
    <item>
      <title>gomod交叉编译cannot find module for path…</title>
      <link>https://blog.itstudying.com/2019/gomod%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91cannot_find_module_for_path/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/gomod%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91cannot_find_module_for_path/</guid>
      <description>gomod交叉编译cannot find module for path… 新建项目准备使用gomod管理依赖，而且项目没放在gopath的时候发现个问题，go build -o SI-Kline-Minute cmd/main.go能通过，GOOS=linux GOARCH=amd64 go build -o SI-Kline-Minute cmd/main.go进行交叉编译报找不到module错误
环境 项目结构
├── Makefile ├── README.md ├── SI-Kline-Minute ├── cmd │ └── main.go ├── common │ ├── db │ │ ├── mongo │ │ │ └── mongo.go │ │ └── redis │ ├── log │ │ └── logger.go │ └── utils │ └── utils.go ├── config │ └── config.go ├── config.toml ├── go.mod ├── go.</description>
    </item>
    
    <item>
      <title>golang utf-16le编码转换至utf-8</title>
      <link>https://blog.itstudying.com/2019/utf-16letoutf-8/</link>
      <pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/utf-16letoutf-8/</guid>
      <description>golang utf-16le编码转换至utf-8  最近工作中在做解析港股数据相关工作，香港交易所提供的 OMD-MMDH 服务将数据以字节流的形式下发，其中汉字使用utf16编码，而 golang 程序则默认utf8编码，所以需要对数据做转换，特此对 Unicode 相关知识以及 golang 实现utf16 转换至 utf8 的方法做下学习笔记
 BOM简介 BOM(Byte Order Mark) 既字节序标记，一般是出现在以Unicode编码的文件开始的头部。带BOM的Unicode编码文件查看其二进制编码会出现以下数据，下面只是一些常用的字符编码
   字符编码 Bom (十六进制)     UTF-8 EF BB BF   UTF-16 (BE) 大端序 FE FF   UTF-16 (LE) 小端序 FF FE   UTF-32 (BE) 大端序 00 00 FE FF   UTF-32 (LE) 小端序 FF FE 00 00   GB-18030 84 31 95 33    Unicode编码简介  Unicode 是容纳世界所有文字符号的国际标准编码，使用四个字节为每个字符编码。</description>
    </item>
    
  </channel>
</rss>