<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on itstudying</title>
    <link>https://blog.itstudying.com/posts/</link>
    <description>Recent content in Posts on itstudying</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.itstudying.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang socket websocket</title>
      <link>https://blog.itstudying.com/2019/golang_socket_websocket/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/golang_socket_websocket/</guid>
      <description>经作者授权转发 原文链接：https://www.jianshu.com/p/c0db1567bfd9
 Golang socket websocket 理论知识可以参考
网络信息怎么在网线中传播的 （转载自知乎）
Android 网络(一) 概念 TCP/IP Socket Http Restful
脑残式网络编程入门(一)：跟着动画来学TCP三次握手和四次挥手
脑残式网络编程入门(二)：我们在读写Socket时，究竟在读写什么？
TCP 粘包问题浅析及其解决方案，这个帖子里大家一顿喷粘包这个叫法
我工作五年的时候也不知道 “TCP 粘包”，继续吐槽
一、API 1.服务端通过Listen加Accept package main import ( &amp;quot;fmt&amp;quot; &amp;quot;net&amp;quot; &amp;quot;os&amp;quot; &amp;quot;time&amp;quot; ) func main() { //通过 ResolveTCPAddr 获取一个 TCPAddr //ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error) //net参数是&amp;quot;tcp4&amp;quot;、&amp;quot;tcp6&amp;quot;、&amp;quot;tcp&amp;quot;中的任意一个， //分别表示 TCP(IPv4-only),TCP(IPv6-only) //或者 TCP(IPv4,IPv6 的任意一个) //addr 表示域名或者IP地址， //例如&amp;quot;www.google.com:80&amp;quot; 或者&amp;quot;127.0.0.1:22&amp;quot;. service := &amp;quot;:7777&amp;quot; tcpAddr, err := net.ResolveTCPAddr(&amp;quot;tcp4&amp;quot;, service) checkError(err) //ListenTCP(net string, laddr *TCPAddr) (l *TCPListener, err os.</description>
    </item>
    
    <item>
      <title>jenkins 跨机房自动部署方案</title>
      <link>https://blog.itstudying.com/2019/jenkins%E8%B7%A8%E6%9C%BA%E6%88%BF%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/jenkins%E8%B7%A8%E6%9C%BA%E6%88%BF%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/</guid>
      <description>jenkins 跨机房自动部署方案 嘿嘿，首先不进入正题。这两天趁着假期把笔记内容都给整理了一番，这些大多是平时写代码的总结，以及看过的一些文章的转载和笔记，数了一下大概将近150篇文章。每次V站上秀博客我的特想秀下我的域名，只是我现在这小站 itstudying 太简陋了点，空有外表,实际啥内容也没，只有个个人简介在里面。而且我还花钱买了个服务器挂着它，与其闲着它不用还不如把这些笔记整理下放上去，文章倒不是多牛逼，只是些自己的个人总结，所悟所思所想而已。
对于不同机房，网络互不相同情况下部署解决方法 正常情况下想要使用jenkins做自动化部署只需要安装Publish Over SSH插件即可，但是不同机房、网络不通得情况下就不能使用此插件了，像我们公司有三个机房，难道每个机房都配一个jenkins吗。。。又或者手动部署？？。。 也很奇怪网上没有合适的解决办法，可能是大佬们觉得问题太过简单了吧。
网络环境
在机房a中有台跳板机，登录a的机器和其他机房b,c的机器都需要通过此跳板机才能登录，jenkins是在a机房中。首先想到是在jenkins机器上设置ssh代理，但是测试下在jenkins机器上能正常登录到其他机房，但是jenkins部署时怎么着都不通，貌似是jenkins自己维护了一套ssh服务。所以尝试第二种方案，比如有以下两个文件需要部署至机房
config.toml main   新建两个辅助部署脚本deploy.sh和重启脚本restart.sh，将需部署的文件以及两个脚本先上传到跳板机器，  deploy.sh
#!/bin/bash function perform() { IP=$1 DIR=$2 PORT=$3 FILENAME=$4 ENV=$5 echo &amp;quot;scp config&amp;quot; scp ${PORT} ${DIR}${FILENAME} root@${IP}:/data/www/demo/_config.toml echo &amp;quot;scp main&amp;quot; scp ${PORT} ${DIR}_main root@${IP}:/data/www/demo/_main echo &amp;quot;scp restart&amp;quot; scp ${PORT} ${DIR}restart.sh root@${IP}:/data/www/demo/restart.sh echo &amp;quot;sh restart&amp;quot; ssh root@${IP} ${PORT,,} &amp;quot;sh /data/www/demo/restart.sh ${ENV}&amp;quot; echo &amp;quot;完成&amp;quot; } if [[ &amp;quot;$1&amp;quot; == &amp;quot;a&amp;quot; ]]; then echo &amp;quot;test start!</description>
    </item>
    
    <item>
      <title>Centos 配置 shadowsocks客户端</title>
      <link>https://blog.itstudying.com/2019/centos%E9%85%8D%E7%BD%AEshadowsocks/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/centos%E9%85%8D%E7%BD%AEshadowsocks/</guid>
      <description>Centos 配置shadowsocks客户端  最近把系统换成了centos，第一步肯定是科学上网啦，so配置一下以及使用systemctl管理服务
 shadowsocks客户端  安装pip
yum install python-setuptools &amp;amp;&amp;amp; easy_install pip  安装shadowsocks客户端
pip install git+https://github.com/shadowsocks/shadowsocks.git@master  配置文件
  新建配置文件 /etc/shadowsocks.json
{ &amp;quot;server&amp;quot;:&amp;quot;服务器 IP 或是域名&amp;quot;, &amp;quot;server_port&amp;quot;:端口号, &amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;, &amp;quot;local_port&amp;quot;:1080, &amp;quot;password&amp;quot;:&amp;quot;密码&amp;quot;, &amp;quot;timeout&amp;quot;:300, &amp;quot;method&amp;quot;:&amp;quot;加密方式 (chacha20-ietf-poly1305 / aes-256-cfb)&amp;quot;, &amp;quot;fast_open&amp;quot;: false }   如果服务器和客户端都部署在Linux 3.7.1或更高版本上，则可以打开fast_open以降低延迟（需要服务端支持）。
 首先在config.json中设置fast_open为true。然后暂时在操作系统上打开快速打开 参考教程：
echo 3 &amp;gt; /proc/sys/net/ipv4/tcp_fastopen   启动 ss客户端名字为sslocal，如果找不到可执行命令whereis sslocal查看程序安装目录
后台启动客户端 /usr/bin/sslocal -c /etc/shadowsocks.json -d start   systemctl 管理服务 systemd的所有可用的单元文件存放在 /usr/lib/systemd/system/ 和 /etc/systemd/system/ 目录，后者优先级更高 1.</description>
    </item>
    
    <item>
      <title>gomod交叉编译cannot find module for path…</title>
      <link>https://blog.itstudying.com/2019/gomod%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91cannot_find_module_for_path/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/gomod%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91cannot_find_module_for_path/</guid>
      <description>gomod交叉编译cannot find module for path… 新建项目准备使用gomod管理依赖，而且项目没放在gopath的时候发现个问题，go build -o SI-Kline-Minute cmd/main.go能通过，GOOS=linux GOARCH=amd64 go build -o SI-Kline-Minute cmd/main.go进行交叉编译报找不到module错误
环境 项目结构
├── Makefile ├── README.md ├── SI-Kline-Minute ├── cmd │ └── main.go ├── common │ ├── db │ │ ├── mongo │ │ │ └── mongo.go │ │ └── redis │ ├── log │ │ └── logger.go │ └── utils │ └── utils.go ├── config │ └── config.go ├── config.toml ├── go.mod ├── go.</description>
    </item>
    
    <item>
      <title>golang utf-16le编码转换至utf-8</title>
      <link>https://blog.itstudying.com/2019/utf-16letoutf-8/</link>
      <pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.itstudying.com/2019/utf-16letoutf-8/</guid>
      <description>golang utf-16le编码转换至utf-8  最近工作中在做解析港股数据相关工作，香港交易所提供的 OMD-MMDH 服务将数据以字节流的形式下发，其中汉字使用utf16编码，而 golang 程序则默认utf8编码，所以需要对数据做转换，特此对 Unicode 相关知识以及 golang 实现utf16 转换至 utf8 的方法做下学习笔记
 BOM简介 BOM(Byte Order Mark) 既字节序标记，一般是出现在以Unicode编码的文件开始的头部。带BOM的Unicode编码文件查看其二进制编码会出现以下数据，下面只是一些常用的字符编码
   字符编码 Bom (十六进制)     UTF-8 EF BB BF   UTF-16 (BE) 大端序 FE FF   UTF-16 (LE) 小端序 FF FE   UTF-32 (BE) 大端序 00 00 FE FF   UTF-32 (LE) 小端序 FF FE 00 00   GB-18030 84 31 95 33    Unicode编码简介  Unicode 是容纳世界所有文字符号的国际标准编码，使用四个字节为每个字符编码。</description>
    </item>
    
  </channel>
</rss>